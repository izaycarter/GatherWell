{"version":3,"sources":["components/Login.js","components/ChurchDetail.js","components/Map.js","components/Parent.js","containers/SignUp.js","components/Header.js","components/Footer.js","components/BaseLayout.js","serviceWorker.js","index.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","Login","props","state","username","email","password","handleSubmit","bind","handleChange","e","preventDefault","post","this","then","res","localStorage","setItem","JSON","stringify","data","history","push","catch","error","console","log","setState","target","name","value","onSubmit","htmlFor","id","type","onChange","placeholder","required","Component","ChurchDetail","WrapppedMap","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","lng","Map","style","width","height","googleMapURL","loadingElement","containerElement","mapElement","Parent","Row","className","SignUp","password1","password2","Header","Footer","BaseLayout","Container","children","Boolean","window","location","hostname","match","ReactDOM","render","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe39d079.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      password: ''\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    axios.post('/api/v1/rest-auth/login/', this.state)\n    .then(res => {\n        localStorage.setItem('my-app-user', JSON.stringify(res.data));\n        this.props.history.push('/');\n    })\n    .catch(error => {\n        console.log(error);\n    });\n  }\n\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  render() {\n      console.log(this.props)\n    return  (\n      <form onSubmit={this.handleSubmit}>\n        <p>\n          <label htmlFor=\"username\">Username</label>\n          <input id='username' type='text' name='username' value={this.state.username} onChange={this.handleChange} placeholder='Enter username' required />\n        </p>\n        <p>\n          <label htmlFor=\"email\">Email</label>\n          <input id='email' type='email' name='email' value={this.state.email} onChange={this.handleChange} placeholder='Enter email' required />\n        </p>\n        <p>\n          <label htmlFor=\"password\">Password</label>\n          <input id='password' type='password' name='password' value={this.state.password} onChange={this.handleChange} placeholder='Enter password' required/>\n        </p>\n        <button>Login</button>\n      </form>\n    )\n  }\n}\n\nexport default Login;\n","import React, {Component} from 'react';\n\nclass ChurchDetail extends Component {\n\n        render(){\n            return(\n                <div>Church stuff</div>\n            )\n        }\n}\n\nexport default ChurchDetail;\n","import React from \"react\";\nimport { GoogleMap, withScriptjs, withGoogleMap } from \"react-google-maps\";\n\nfunction MyMap(){\n    return (\n        <GoogleMap\n        defaultZoom={10}\n        defaultCenter={{ lat: 34.8485, lng: -82.4000 }}\n        />\n    );\n}\n\nconst WrapppedMap = withScriptjs(withGoogleMap(MyMap));\n\nexport default function Map(){\n    return(\n        <div style={{ width:\"100vh\", height:\"100vh\" }}>\n            <WrapppedMap\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyD0Xm6jvI-eFVF8O9EYDFl3pjIIfF_TGyk`}\n                loadingElement={<div style={{height: \"100% \"}} />}\n                containerElement={<div style={{height: \"100% \"}} />}\n                mapElement ={<div style={{height: \"100% \"}} />}\n                />\n        </div>\n    )\n}\n","import React, {Component} from 'react';\nimport ChurchDetail from \"./ChurchDetail\";\n// import MapContainer from \"./MapContainer\";\nimport Map from \"./Map\";\nimport Row from 'react-bootstrap/Row';\n\nclass Parent extends Component {\n\n    render(){\n        return(\n            <Row>\n            <Map/>\n            <ChurchDetail className=\"col-sm-12 col-md-6\" />\n            </Row>\n        )\n\n    }\n}\n\nexport default Parent;\n","import React, {Component} from 'react';\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass SignUp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      password1: '',\n      password2: '',\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    axios.post('/api/v1/rest-auth/registration/', this.state)\n    .then(res => {\n        localStorage.setItem('my-app-user', JSON.stringify(res.data));\n        this.props.history.push('/login/');\n    })\n    .catch(error => {\n        console.log(error);\n    });\n  }\n\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  render() {\n      console.log(this.props)\n    return  (\n      <form onSubmit={this.handleSubmit}>\n        <p>\n          <label htmlFor=\"username\">Username</label>\n          <input id='username' type='text' name='username' value={this.state.username} onChange={this.handleChange} placeholder='Enter username' required />\n        </p>\n        <p>\n          <label htmlFor=\"email\">Email</label>\n          <input id='email' type='email' name='email' value={this.state.email} onChange={this.handleChange} placeholder='Enter email' required />\n        </p>\n        <p>\n          <label htmlFor=\"password\">Password</label>\n          <input id='password1' type='password' name='password1' value={this.state.password1} onChange={this.handleChange} placeholder='Enter password' required/>\n        </p>\n        <p>\n          <label htmlFor=\"password\">Password</label>\n          <input id='password2' type='password' name='password2' value={this.state.password2} onChange={this.handleChange} placeholder='Enter password' required/>\n        </p>\n        <button>Sign Up</button>\n      </form>\n    )\n  }\n}\n\nexport default SignUp;\n","import React, {Component} from 'react';\nimport Row from 'react-bootstrap/Row';\n\n// let isAuthenticated = localStorage.getItem(\"my-app-user\") !== null ? true: false;\nclass Header extends Component{\n    render(){\n        return (\n            <Row className=\"justify-content-center\">\n                <h1>Gathering Well</h1>\n            </Row>\n        )\n    }\n}\n\nexport default Header;\n","import React, {Component} from 'react';\nimport Row from 'react-bootstrap/Row';\n\nclass Footer extends Component{\n\n    render(){\n      return (\n        <Row>\n            <div>\n                Footer Page\n            </div>\n        </Row>\n      )\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\n\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nfunction BaseLayout(props) {\n\n  return (\n    <Container>\n        <Header />\n        {props.children}\n        <Footer />\n    </Container>\n  );\n}\n\nexport default BaseLayout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Login from './components/Login';\nimport Parent from \"./components/Parent\";\nimport SignUp from \"./containers/SignUp\";\nimport BaseLayout from \"./components/BaseLayout\";\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <BaseLayout>\n            <Switch>\n                <Route path=\"/signup/\" component={SignUp}/>\n                <Route path='/login/' component={Login}/>\n                <Route exact path=\"/\" component={Parent}/>\n            </Switch>\n        </BaseLayout>\n    </Router>\n, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}